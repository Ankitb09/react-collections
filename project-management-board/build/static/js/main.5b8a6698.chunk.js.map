{"version":3,"sources":["components/Ticket/index.js","components/Lane/Lane.js","withDataFetching.js","containers/Board.js","components/Header/Header.js","containers/Tickets.js","containers/App.js","serviceWorker.js","index.js"],"names":["TicketWrapper","styled","div","props","marginRight","Title","h3","Body","p","Ticket","ticket","title","body","LaneWrapper","TicketsWrapper","Alert","h2","Lane","loading","error","tickets","map","key","id","withDataFetching","WrappedComponent","WithDataFetchingclass","state","data","fetch","this","datasource","console","log","json","dataJSON","setState","message","React","Component","displayName","name","BoardWrapper","lanes","lane","filter","item","HeaderWrapper","h1","Header","GlobalStyle","createGlobalStyle","AppWrapper","App","dataSource","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b8a6698.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TicketWrapper = styled.div`\n  background: darkGray;\n  padding: 20px;\n  border-radius: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 5%;\n    margin-right: ${props => (!!props.marginRight ? \"1%\" : 0)};\n  }\n`;\n\nconst Title = styled.h3`\n  width: 100%;\n  margin: 0px;\n`;\n\nconst Body = styled.p`\n  width: 100%;\n`;\n\nconst Ticket = ({ marginRight, ticket }) => (\n  <TicketWrapper marginRight={marginRight}>\n    <Title>{ticket.title}</Title>\n    <Body>{ticket.body}</Body>\n  </TicketWrapper>\n);\n\nexport default Ticket;\n","import React from \"react\";\nimport Ticket from \"../Ticket\";\nimport styled from \"styled-components\";\n\nconst LaneWrapper = styled.div`\n  list-style: none;\n  text-align: left;\n  padding: 0;\n  background: lightGray;\n  border-radius: 20px;\n  min-height: 50vh;\n  width: 20vw;\n\n  @media (max-width: 768px) {\n    margin-bottom: 5%;\n  }\n`;\n\nconst TicketsWrapper = styled.div`\n  padding: 5%;\n`;\n\nconst Alert = styled.div`\n  text-align: center;\n`;\n\nconst Title = styled.h2`\n  width: 100%;\n  padding-bottom: 10px;\n  text-align: center;\n  border-bottom: 1px solid darkGray;\n`;\n\nconst Lane = ({ title, loading, error, tickets }) => (\n  <LaneWrapper>\n    <Title>{title}</Title>\n    {(loading || error) && <Alert>{loading ? \"loading...\" : error}</Alert>}\n\n    <TicketsWrapper>\n      {tickets.map(ticket => (\n        <Ticket key={ticket.id} ticket={ticket} />\n      ))}\n    </TicketsWrapper>\n  </LaneWrapper>\n);\n\nexport default Lane;\n","import React from \"react\";\n\nconst withDataFetching = WrappedComponent => {\n  class WithDataFetchingclass extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        data: [],\n        loading: true,\n        error: \"\"\n      };\n    }\n    async componentDidMount() {\n      try {\n        const data = await fetch(this.props.datasource);\n        console.log(data);\n\n        const dataJSON = await data.json();\n\n        if (dataJSON) {\n          this.setState({\n            data: dataJSON,\n            loading: false\n          });\n        }\n      } catch (e) {\n        this.setState({\n          data: [],\n          loading: false,\n          error: e.message\n        });\n      }\n    }\n\n    render() {\n      const { data, loading, error } = this.state;\n      return (\n        <WrappedComponent\n          data={data}\n          loading={loading}\n          error={error}\n          {...this.props}\n        />\n      );\n    }\n  }\n\n  WithDataFetchingclass.displayName = `WithDataFetching(${WrappedComponent.name})`;\n  return WithDataFetchingclass;\n};\n\nexport default withDataFetching;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Lane from \"../components/Lane/Lane\";\nimport withDataFetching from \"../withDataFetching\";\n\nconst BoardWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 5%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Board = ({ lanes, loading, error, data }) => {\n  return (\n    <BoardWrapper>\n      {lanes.map(lane => (\n        <Lane\n          key={lane.id}\n          loading={loading}\n          error={error}\n          tickets={data.filter(item => item.lane === lane.id)}\n          title={lane.title}\n        />\n      ))}\n    </BoardWrapper>\n  );\n};\n\nexport default withDataFetching(Board);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderWrapper = styled.div`\n  background-color: blue;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst Title = styled.h1`\n  height: 64px;\n  pointer-events: none;\n`;\n\nconst Header = () => (\n  <HeaderWrapper>\n    <Title>Project Management Board</Title>\n  </HeaderWrapper>\n);\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport withDataFetching from \"../withDataFetching\";\nimport Ticket from \"../components/Ticket\";\n\nconst TicketsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 5%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Alert = styled.div`\n  text-align: center;\n`;\n\nconst Tickets = ({ loading, data, error }) => (\n  <TicketsWrapper>\n    {(loading || error) && <Alert>{loading ? \"Loading...\" : error}</Alert>}\n    {data.map(ticket => (\n      <Ticket key={ticket.id} marginRight ticket={ticket} />\n    ))}\n  </TicketsWrapper>\n);\n\nexport default withDataFetching(Tickets);\n","import React, { Component } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Board from \"./Board\";\nimport Header from \"../components/Header/Header\";\nimport Ticket from \"../containers/Tickets\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n`;\n\nclass App extends Component {\n  render() {\n    const lanes = [\n      { id: 1, title: \"To Do\" },\n      { id: 2, title: \"In Progress\" },\n      { id: 3, title: \"Review\" },\n      { id: 4, title: \"Done\" }\n    ];\n\n    return (\n      <>\n        <GlobalStyle />\n        <AppWrapper>\n          <Header />\n          <Board lanes={lanes} dataSource={\"../../assets/data.json\"} />\n          <Ticket dataSource={\"../../assets/data.json\"} />\n        </AppWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}